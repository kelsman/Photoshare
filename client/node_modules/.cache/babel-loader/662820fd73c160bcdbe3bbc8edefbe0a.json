{"ast":null,"code":"import * as postActionTypes from '../Constants/postConstants';\nimport { setToken } from '../../utils';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\nconst token = localStorage.getItem('authToken');\nconst baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\"; // @create post \n\nexport const createPostFunc = (data, history) => {\n  const token = localStorage.getItem('authToken');\n  return async dispatch => {\n    try {\n      if (token) {\n        await setToken(token);\n      }\n\n      ;\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const response = await axios.post('/api/route/post/createPost', config, data);\n\n      if (response) {\n        await dispatch({\n          type: postActionTypes.CREATE_POST_SUCCESS,\n          payload: response.data.msg\n        });\n        cogoToast.success('post created');\n      }\n    } catch (error) {\n      if (error.response) {\n        await dispatch({\n          type: postActionTypes.CREATE_POST_FAIL,\n          payload: error.response.data\n        });\n\n        if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n          history.push('/');\n          localStorage.removeItem('authToken');\n          cogoToast.info('session expired');\n        }\n      }\n    }\n  };\n}; //  load explore posts \n\nexport const getPosts = history => {\n  return async dispatch => {\n    const token = localStorage.getItem('authToken');\n\n    try {\n      if (token) {\n        await setToken(token);\n      }\n\n      ;\n      const response = await axios.get(`/api/route/post/retrieveExplorePost`);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.GET_POSTS_SUCCESS,\n          payload: response.data.posts\n        });\n      }\n\n      ;\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.GET_POSTS_FAIL,\n          payload: error.response.data\n        });\n\n        if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        } // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n\n      }\n    }\n  };\n}; //  @comment on a post with a given post id passed as a param to the url\n\nexport const commentPost = (postId, commentText, socket, history) => {\n  return async dispatch => {\n    if (token) {\n      await setToken(token);\n    }\n\n    ;\n\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const response = await axios.post(`/api/route/post/comment/${postId}`, {\n        commentText\n      });\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.COMMENT_POST_SUCCESS,\n          payload: response.data.data\n        });\n        console.log(response.data.data);\n      }\n\n      ;\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.COMMENT_POST_FAIL,\n          payload: error.response.data.msg\n        });\n\n        if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        } // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n\n      }\n    }\n  };\n}; // @delete a commment \n\nexport const deleteComment = (postid, commentid, history) => async dispatch => {\n  try {\n    if (token) {\n      await setToken(token);\n    }\n\n    ;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const response = await axios.put(`/api/route/post/deleteComment/${postid}/${commentid}`, config);\n\n    if (response) {\n      console.log(response.data);\n      dispatch({\n        type: postActionTypes.DELETE_COMMENT_SUCCESS,\n        payload: response.data.data\n      });\n    }\n  } catch (error) {\n    if (error.response) {\n      console.log(error.response.data);\n      await dispatch({\n        type: postActionTypes.DELETE_COMMENT_FAIL,\n        payload: error.response.data.msg\n      });\n\n      if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n        localStorage.removeItem('authToken');\n        history.push('/');\n      }\n    }\n  }\n};\nexport const getSinglePost = (postId, history) => {\n  return async dispatch => {\n    if (token) {\n      await setToken(token);\n    }\n\n    ;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const response = await axios.get(`/api/route/post/singlePost/${postId}`, config);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.GET_SINGLE_POST_SUCCESS,\n          payload: response.data.post[0]\n        });\n      }\n\n      ;\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.GET_SINGLE_POST_FAIL,\n          payload: error.response.data.msg\n        });\n\n        if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        }\n      }\n    }\n  };\n}; //  like & unlike  a post \n\nexport const likePost = (postId, socket, history) => {\n  return async dispatch => {\n    const token = localStorage.getItem('authToken');\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    if (token) {\n      await setToken(token);\n    }\n\n    ;\n\n    try {\n      const response = await axios.put(`/api/route/post/likePost/${postId}`, config);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.LIKE_POST_SUCCESS,\n          payload: response.data.data\n        });\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.LIKE_POST_FAIL,\n          payload: error.response.data.msg\n        });\n        cogoToast.info(`${error.response.data.msg}`, {\n          position: 'top-center'\n        });\n\n        if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        }\n      }\n    }\n  };\n}; //  load feed posts \n\nexport const retrieveFeedPosts = history => async dispatch => {\n  const token = localStorage.getItem('authToken');\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    await setToken(token);\n  }\n\n  ;\n\n  try {\n    const response = await axios.get(`api/route/post/retrieveFeedPosts`, config);\n\n    if (response) {\n      console.log(response.data);\n      dispatch({\n        type: postActionTypes.GET_FEEDS_SUCCESS,\n        payload: response.data.posts\n      });\n    }\n  } catch (error) {\n    if (error.response) {\n      console.log(error.response.data);\n      await dispatch({\n        type: postActionTypes.GET_FEEDS_FAIL,\n        payload: error.response.data.msg\n      });\n      cogoToast.info(`${error.response.data.msg}`, {\n        position: 'top-center'\n      });\n\n      if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n        history.push('/');\n        localStorage.removeItem('authToken');\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/Actions/postActions.js"],"names":["postActionTypes","setToken","axios","cogoToast","Routes","token","localStorage","getItem","baseUrl","process","env","REACT_APP_BASE_URL","createPostFunc","data","history","dispatch","config","headers","response","post","type","CREATE_POST_SUCCESS","payload","msg","success","error","CREATE_POST_FAIL","push","removeItem","info","getPosts","get","GET_POSTS_SUCCESS","posts","console","log","GET_POSTS_FAIL","commentPost","postId","commentText","socket","COMMENT_POST_SUCCESS","COMMENT_POST_FAIL","deleteComment","postid","commentid","put","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAIL","getSinglePost","GET_SINGLE_POST_SUCCESS","GET_SINGLE_POST_FAIL","likePost","LIKE_POST_SUCCESS","LIKE_POST_FAIL","position","retrieveFeedPosts","GET_FEEDS_SUCCESS","GET_FEEDS_FAIL"],"mappings":"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","sourcesContent":["import * as postActionTypes from '../Constants/postConstants';\nimport { setToken } from '../../utils'\n\n\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\n\nconst token = localStorage.getItem('authToken');\n\nconst baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\"\n\n\n// @create post \n\nexport const createPostFunc = (data, history) => {\n    const token = localStorage.getItem('authToken')\n    return async (dispatch) => {\n        try {\n            if (token) {\n                await setToken(token)\n            };\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n            const response = await axios.post('/api/route/post/createPost', config, data)\n            if (response) {\n                await dispatch({ type: postActionTypes.CREATE_POST_SUCCESS, payload: response.data.msg })\n                cogoToast.success('post created')\n            }\n        } catch (error) {\n            if (error.response) {\n                await dispatch({ type: postActionTypes.CREATE_POST_FAIL, payload: error.response.data })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    history.push('/')\n                    localStorage.removeItem('authToken');\n                    cogoToast.info('session expired');\n                }\n            }\n        }\n    }\n}\n\n//  load explore posts \nexport const getPosts = (history) => {\n    return async (dispatch) => {\n        const token = localStorage.getItem('authToken')\n        try {\n            if (token) {\n                await setToken(token)\n            };\n\n            const response = await axios.get(`/api/route/post/retrieveExplorePost`);\n            if (response) {\n                dispatch({ type: postActionTypes.GET_POSTS_SUCCESS, payload: response.data.posts })\n\n            };\n\n        } catch (error) {\n            if (error.response) {\n                console.log(error.response.data)\n                await dispatch({ type: postActionTypes.GET_POSTS_FAIL, payload: error.response.data })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    localStorage.removeItem('authToken');\n                    history.push('/')\n                }\n                // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n            }\n        }\n\n    }\n}\n\n\n\n//  @comment on a post with a given post id passed as a param to the url\nexport const commentPost = (postId, commentText, socket, history) => {\n    return async (dispatch) => {\n        if (token) {\n            await setToken(token)\n        };\n\n        try {\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n            const response = await axios.post(`/api/route/post/comment/${postId}`, { commentText });\n            if (response) {\n\n                dispatch({ type: postActionTypes.COMMENT_POST_SUCCESS, payload: response.data.data })\n                console.log(response.data.data)\n            };\n\n        } catch (error) {\n            if (error.response) {\n                console.log(error.response.data)\n                await dispatch({ type: postActionTypes.COMMENT_POST_FAIL, payload: error.response.data.msg })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    localStorage.removeItem('authToken');\n                    history.push('/')\n                }\n                // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n            }\n        }\n    }\n}\n\n// @delete a commment \n\nexport const deleteComment = (postid, commentid, history) => async dispatch => {\n\n    try {\n        if (token) {\n            await setToken(token)\n        };\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n\n        const response = await axios.put(`/api/route/post/deleteComment/${postid}/${commentid}`, config)\n        if (response) {\n            console.log(response.data)\n            dispatch({ type: postActionTypes.DELETE_COMMENT_SUCCESS, payload: response.data.data })\n        }\n    } catch (error) {\n        if (error.response) {\n            console.log(error.response.data)\n            await dispatch({ type: postActionTypes.DELETE_COMMENT_FAIL, payload: error.response.data.msg })\n            if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                localStorage.removeItem('authToken');\n                history.push('/');\n\n            }\n        }\n    }\n}\n\nexport const getSinglePost = (postId, history) => {\n\n    return async (dispatch) => {\n\n        if (token) {\n            await setToken(token)\n        };\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        try {\n            const response = await axios.get(`/api/route/post/singlePost/${postId}`, config)\n            if (response) {\n                dispatch({ type: postActionTypes.GET_SINGLE_POST_SUCCESS, payload: response.data.post[0] })\n\n            };\n\n        } catch (error) {\n            if (error.response) {\n                console.log(error.response.data)\n                await dispatch({ type: postActionTypes.GET_SINGLE_POST_FAIL, payload: error.response.data.msg })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    localStorage.removeItem('authToken');\n                    history.push('/');\n\n                }\n            }\n        }\n    }\n}\n\n\n\n//  like & unlike  a post \n\nexport const likePost = (postId, socket, history) => {\n\n    return async (dispatch) => {\n\n        const token = localStorage.getItem('authToken');\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        if (token) {\n            await setToken(token)\n        };\n        try {\n            const response = await axios.put(`/api/route/post/likePost/${postId}`, config);\n            if (response) {\n\n                dispatch({ type: postActionTypes.LIKE_POST_SUCCESS, payload: response.data.data })\n\n            }\n        } catch (error) {\n            if (error.response) {\n                console.log(error.response.data)\n                await dispatch({ type: postActionTypes.LIKE_POST_FAIL, payload: error.response.data.msg })\n                cogoToast.info(`${error.response.data.msg}`, { position: 'top-center' })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    localStorage.removeItem('authToken');\n                    history.push('/');\n                }\n\n            }\n\n        }\n\n    }\n\n}\n\n\n//  load feed posts \n\nexport const retrieveFeedPosts = (history) => async dispatch => {\n\n    const token = localStorage.getItem('authToken');\n\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n    if (token) {\n        await setToken(token)\n    };\n    try {\n        const response = await axios.get(`api/route/post/retrieveFeedPosts`, config)\n        if (response) {\n            console.log(response.data)\n            dispatch({ type: postActionTypes.GET_FEEDS_SUCCESS, payload: response.data.posts })\n        }\n    } catch (error) {\n        if (error.response) {\n            console.log(error.response.data)\n            await dispatch({ type: postActionTypes.GET_FEEDS_FAIL, payload: error.response.data.msg })\n            cogoToast.info(`${error.response.data.msg}`, { position: 'top-center' })\n            if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                history.push('/');\n                localStorage.removeItem('authToken');\n            }\n\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}