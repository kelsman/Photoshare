{"ast":null,"code":"import { userActionTypes } from '../Constants/userConstants';\nimport { setToken } from '../../utils';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\nconst baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\";\nexport const signup = (data, history) => {\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      cogoToast.loading('Registering....');\n      const response = await axios.post(`${baseUrl}/api/route/user/register`, config, data);\n\n      if (response) {\n        await dispatch({\n          type: userActionTypes.SIGN_UP_SUCESS,\n          payload: response.data\n        });\n        cogoToast.success('Register successfully');\n        history.push('/');\n      }\n    } catch (error) {\n      console.log(error.message);\n\n      if (error.response) {\n        await dispatch({\n          type: userActionTypes.SIGN_UP_FAIL,\n          payload: error.response.data\n        });\n        cogoToast.error(`${error.response.data.msg}`);\n      }\n    }\n  };\n};\nexport const signin = data => {\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const response = await axios.post(`${baseUrl}/api/route/user/login`, data, config);\n\n      if (response) {\n        await dispatch({\n          type: userActionTypes.LOG_IN_SUCCESS,\n          payload: response.data\n        });\n        await localStorage.setItem('authToken', response.data.jwtToken);\n        await cogoToast.success('sign in success', {\n          position: 'bottom-right'\n        });\n      }\n    } catch (error) {\n      if (error.response) {\n        await dispatch({\n          type: userActionTypes.LOG_IN_FAIL,\n          payload: error.response.data\n        });\n      }\n    }\n  };\n};\nexport const loaduser = history => {\n  return async dispatch => {\n    const token = localStorage.getItem('authToken');\n\n    try {\n      if (token) {\n        setToken(token);\n      }\n\n      const response = await axios.get(\"http://localhost:9000/api/route/user/getUser\");\n\n      if (response) {\n        await dispatch({\n          type: userActionTypes.LOAD_USER_SUCCESS,\n          payload: response.data.user\n        });\n      }\n    } catch (error) {\n      if (error.response) {\n        await dispatch({\n          type: userActionTypes.LOAD_USER_FAIL,\n          payload: error.response.data\n        });\n        cogoToast.error(`${error.response.data.msg}`, {\n          position: \"top-right\"\n        });\n\n        if (error.response.data.msg.includes(`you're not authorised`)) {\n          await cogoToast.info('redirected to login');\n          history.push(Routes.Login);\n        }\n\n        if (error.response.data.msg.includes(`jwt expired`)) {\n          localStorage.removeItem('authToken');\n          history.push(Routes.Login);\n        }\n      }\n    }\n  };\n};\nexport const LogOut = history => {\n  return async dispatch => {\n    try {\n      await localStorage.removeItem('authToken');\n      dispatch({\n        type: userActionTypes.LOG_OUT_SUCCESS,\n        payload: \"sign out sucessful\"\n      });\n      history.push(Routes.Login);\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: userActionTypes.LOG_OUT_FAIL,\n        payload: error.message\n      });\n    }\n  };\n};\n_c = LogOut;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogOut\");","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/Actions/userActions.js"],"names":["userActionTypes","setToken","axios","cogoToast","Routes","baseUrl","process","env","REACT_APP_BASE_URL","signup","data","history","dispatch","config","headers","loading","response","post","type","SIGN_UP_SUCESS","payload","success","push","error","console","log","message","SIGN_UP_FAIL","msg","signin","LOG_IN_SUCCESS","localStorage","setItem","jwtToken","position","LOG_IN_FAIL","loaduser","token","getItem","get","LOAD_USER_SUCCESS","user","LOAD_USER_FAIL","includes","info","Login","removeItem","LogOut","LOG_OUT_SUCCESS","LOG_OUT_FAIL"],"mappings":"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","sourcesContent":["import { userActionTypes } from '../Constants/userConstants';\nimport { setToken } from '../../utils'\n\n\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\"\n\n\nexport const signup = (data, history) => {\n    return async (dispatch) => {\n        try {\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n            cogoToast.loading('Registering....')\n            const response = await axios.post(`${baseUrl}/api/route/user/register`, config, data);\n            if (response) {\n                await dispatch({ type: userActionTypes.SIGN_UP_SUCESS, payload: response.data });\n                cogoToast.success('Register successfully');\n                history.push('/')\n            }\n        } catch (error) {\n            console.log(error.message)\n            if (error.response) {\n                await dispatch({ type: userActionTypes.SIGN_UP_FAIL, payload: error.response.data })\n                cogoToast.error(`${error.response.data.msg}`)\n            }\n        }\n    }\n};\n\nexport const signin = (data) => {\n    return async (dispatch) => {\n\n        try {\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            };\n            const response = await axios.post(`${baseUrl}/api/route/user/login`, data, config);\n            if (response) {\n                await dispatch({ type: userActionTypes.LOG_IN_SUCCESS, payload: response.data });\n                await localStorage.setItem('authToken', response.data.jwtToken);\n                await cogoToast.success('sign in success', { position: 'bottom-right' });\n\n            }\n        } catch (error) {\n            if (error.response) {\n                await dispatch({ type: userActionTypes.LOG_IN_FAIL, payload: error.response.data });\n            }\n        }\n    }\n};\n\nexport const loaduser = (history) => {\n\n    return async (dispatch) => {\n        const token = localStorage.getItem('authToken');\n\n        try {\n            if (token) { setToken(token) }\n            const response = await axios.get(\"http://localhost:9000/api/route/user/getUser\");\n            if (response) {\n                await dispatch({ type: userActionTypes.LOAD_USER_SUCCESS, payload: response.data.user })\n\n            }\n        } catch (error) {\n            if (error.response) {\n                await dispatch({ type: userActionTypes.LOAD_USER_FAIL, payload: error.response.data })\n                cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" });\n                if (error.response.data.msg.includes(`you're not authorised`)) {\n                    await cogoToast.info('redirected to login');\n                    history.push(Routes.Login);\n                }\n                if (error.response.data.msg.includes(`jwt expired`)) {\n                    localStorage.removeItem('authToken');\n                    history.push(Routes.Login);\n                }\n            }\n\n        }\n    }\n};\n\nexport const LogOut = (history) => {\n    return async (dispatch) => {\n        try {\n            await localStorage.removeItem('authToken');\n            dispatch({ type: userActionTypes.LOG_OUT_SUCCESS, payload: \"sign out sucessful\" })\n            history.push(Routes.Login);\n        } catch (error) {\n            console.log(error.message)\n            dispatch({ type: userActionTypes.LOG_OUT_FAIL, payload: error.message })\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}