{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mac/Documents/mern stack/photoShare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mac/Documents/mern stack/photoShare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as postActionTypes from'../Constants/postConstants';import{setToken}from'../../utils';import axios from'axios';import cogoToast from'cogo-toast';import*as Routes from'../../component/routes';var baseUrl=process.env.REACT_APP_BASE_URL||\"http://localhost:9000\";//  load explore posts \nexport var getPosts=function getPosts(history){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var token,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:token=localStorage.getItem('authToken');_context.prev=1;if(!token){_context.next=5;break;}_context.next=5;return setToken(token);case 5:;_context.next=8;return axios.get(\"\".concat(baseUrl,\"/api/route/post/allPosts\"));case 8:response=_context.sent;if(response){dispatch({type:postActionTypes.GET_POSTS_SUCCESS,payload:response.data.posts});console.log(response.data);};_context.next=20;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](1);if(!_context.t0.response){_context.next=20;break;}console.log(_context.t0.response.data);_context.next=19;return dispatch({type:postActionTypes.GET_POSTS_FAIL,payload:_context.t0.response.data});case 19:if(_context.t0.response.data.msg===\"jwt expired\"||_context.t0.response.data.msg===\"you're not authorised\"){localStorage.removeItem('authToken');history.push('/');}// cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\ncase 20:case\"end\":return _context.stop();}}},_callee,null,[[1,13]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/Actions/postActions.js"],"names":["postActionTypes","setToken","axios","cogoToast","Routes","baseUrl","process","env","REACT_APP_BASE_URL","getPosts","history","dispatch","token","localStorage","getItem","get","response","type","GET_POSTS_SUCCESS","payload","data","posts","console","log","GET_POSTS_FAIL","msg","removeItem","push"],"mappings":"6UAAA,MAAO,GAAKA,CAAAA,eAAZ,KAAiC,4BAAjC,CACA,OAASC,QAAT,KAAyB,aAAzB,CAGA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAO,GAAKC,CAAAA,MAAZ,KAAwB,wBAAxB,CAEA,GAAMC,CAAAA,OAAO,CAAGC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,EAAkC,uBAAlD,CAEA;AACA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,OAAD,CAAa,CACjC,+FAAO,iBAAOC,QAAP,qIACGC,KADH,CACWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CADX,qBAIKF,KAJL,+CAKWX,CAAAA,QAAQ,CAACW,KAAD,CALnB,QAME,CANF,sBAOwBV,CAAAA,KAAK,CAACa,GAAN,WAAaV,OAAb,6BAPxB,QAOOW,QAPP,eAQC,GAAIA,QAAJ,CAAc,CACVL,QAAQ,CAAC,CAAEM,IAAI,CAAEjB,eAAe,CAACkB,iBAAxB,CAA2CC,OAAO,CAAEH,QAAQ,CAACI,IAAT,CAAcC,KAAlE,CAAD,CAAR,CACAC,OAAO,CAACC,GAAR,CAAYP,QAAQ,CAACI,IAArB,EACH,EAXF,qFAcK,YAAMJ,QAdX,0BAeKM,OAAO,CAACC,GAAR,CAAY,YAAMP,QAAN,CAAeI,IAA3B,EAfL,uBAgBWT,CAAAA,QAAQ,CAAC,CAAEM,IAAI,CAAEjB,eAAe,CAACwB,cAAxB,CAAwCL,OAAO,CAAE,YAAMH,QAAN,CAAeI,IAAhE,CAAD,CAhBnB,SAiBK,GAAI,YAAMJ,QAAN,CAAeI,IAAf,CAAoBK,GAApB,GAA4B,aAA5B,EAA6C,YAAMT,QAAN,CAAeI,IAAf,CAAoBK,GAApB,0BAAjD,CAAsG,CAClGZ,YAAY,CAACa,UAAb,CAAwB,WAAxB,EACAhB,OAAO,CAACiB,IAAR,CAAa,GAAb,EACH,CACD;AArBL,qEAAP,+DA0BH,CA3BM","sourcesContent":["import * as postActionTypes from '../Constants/postConstants';\nimport { setToken } from '../../utils'\n\n\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\"\n\n//  load explore posts \nexport const getPosts = (history) => {\n    return async (dispatch) => {\n        const token = localStorage.getItem('authToken');\n\n        try {\n            if (token) {\n                await setToken(token)\n            };\n            const response = await axios.get(`${baseUrl}/api/route/post/allPosts`);\n            if (response) {\n                dispatch({ type: postActionTypes.GET_POSTS_SUCCESS, payload: response.data.posts })\n                console.log(response.data);\n            };\n\n        } catch (error) {\n            if (error.response) {\n                console.log(error.response.data)\n                await dispatch({ type: postActionTypes.GET_POSTS_FAIL, payload: error.response.data })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    localStorage.removeItem('authToken');\n                    history.push('/')\n                }\n                // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n            }\n        }\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}