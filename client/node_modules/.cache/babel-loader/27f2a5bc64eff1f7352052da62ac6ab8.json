{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/mern stack/photoShare/client/src/screens/PostPage/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport './style.scss';\nimport { useHistory, useParams, withRouter } from 'react-router-dom'; // componnets\n\nimport NavigationHeader from '../../component/NavigationHeader';\nimport CommentList from '../../component/CommentList';\nimport Profile from '../../component/Profile';\nimport ExploreCardMenu from '../../component/ExplorePostCardMenu';\nimport MobileTabMenu from '../../component/MobileTabMenu';\nimport Card from '../../component/Cards/Card'; // external liberires\n\nimport * as Icon from 'react-feather';\nimport moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid'; // redux imports\n\nimport { commentPost, getPosts, getSinglePost, likePost, unLikePost } from '../../redux/Actions/postActions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PostPage({\n  commentPost,\n  socket,\n  user,\n  userpost,\n  getSinglePost,\n  history,\n  likePost,\n  unLikePost\n}) {\n  _s();\n\n  //    get postId from params\n  const {\n    postId\n  } = useParams(); //  states \n\n  const [commentText, setCommentText] = React.useState('');\n  const [isLoading, setIsLoading] = useState(true); // const [isLikedButtonClicked, setIsLikedButtonClicked] = useState(false)\n\n  const inputRef = useRef();\n\n  const focus = () => {\n    inputRef.current.focus();\n  };\n\n  useEffect(async () => {\n    let subscribe = true;\n\n    if (subscribe) {\n      try {\n        await getSinglePost(postId);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n\n    return () => subscribe = null;\n  }, [getSinglePost]); //  @ functions  all functions defined here\n\n  const likeFunc = async () => {\n    try {\n      await likePost(userpost._id, socket, history); // setIsLikedButtonClicked(true)\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const unlikeFunc = async () => {\n    try {\n      await unLikePost(userpost._id, socket, history);\n    } catch (error) {\n      console.error(error);\n    }\n  }; // const getUserPost = async (postId) => {\n  //     try {\n  //         await getSinglePost(postId)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // };\n\n\n  const handleCommentPost = async event => {\n    event.preventDefault();\n    console.info('submitting btn');\n\n    try {\n      await commentPost(userpost._id, commentText, socket, history);\n      setCommentText('');\n    } catch (error) {\n      console.log(error.message);\n    }\n  }; // const { location: { pathname, state } } = history;\n\n\n  const handleCommentTextChange = e => {\n    setCommentText(e.target.value);\n  };\n\n  if (isLoading && userpost == null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \" hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 13\n  }, this); // return (\n  //     <div className=\"post-page\">\n  //        {}\n  //         <header>\n  //             <NavigationHeader />\n  //         </header>\n  //         <main>\n  //             <div className=\"post_content\">\n  //                 <div className=\"post_image\">\n  //                     <img src={userpost.postMedia} alt=\"image\" />\n  //                 </div>\n  //                 <div className=\"post_details\">\n  //                     <div className=\"profile\">\n  //                         <Profile image={userpost.author.avatar} iconSize=\"medium\" username={userpost.author.username} />\n  //                         <Icon.MoreHorizontal className=\"more-icon\" size={26} />\n  //                     </div>\n  //                     {/* comment section */}\n  //                     <div className=\"comment-section\">\n  //                         {userpost.comments.map((comment) => (\n  //                             <CommentList\n  //                                 key={uuidv4()}\n  //                                 accountName={comment.username}\n  //                                 comment={comment.commentText}\n  //                                 commentImage={comment.avatar}\n  //                                 commentTime={comment.date}\n  //                             />\n  //                         ))}\n  //                     </div>\n  //                     {/* icons*/}\n  //                     <div className=\"card_icon_menu\">\n  //                         <div className=\"card-menu\">\n  //                             <ExploreCardMenu\n  //                                 userpost={userpost}\n  //                                 focus={focus}\n  //                                 likeFunc={likeFunc}\n  //                                 // isLiked={isLikedButtonClicked}\n  //                                 unlikeFunc={unlikeFunc} />\n  //                         </div>\n  //                         {!userpost[0].likes.length ?\n  //                             <small className=\"like-title\"> Be the first to <b>like this</b></small>\n  //                             :\n  //                             <small>{userpost.likes.length} Likes</small>\n  //                         }\n  //                         <small className=\"post-date\">\n  //                             {\n  //                                 moment(userpost[0].date).format('MMM D')\n  //                             }\n  //                         </small>\n  //                     </div>\n  //                     {/*  add a comment form */}\n  //                     <form className=\"addComment\" onSubmit={handleCommentPost}>\n  //                         <input\n  //                             ref={inputRef}\n  //                             value={commentText}\n  //                             onChange={handleCommentTextChange}\n  //                             type=\"text\"\n  //                             placeholder=\"Add a comment...\"\n  //                             className=\"commentText\"\n  //                             name=\"commentText\"\n  //                         />\n  //                         <button\n  //                             disabled={commentText ? false : true}\n  //                             type=\"submit\"\n  //                             className=\"postText-btn\">Post</button>\n  //                     </form>\n  //                 </div>\n  //             </div>\n  //         </main>\n  //     </div>\n  // )\n}\n\n_s(PostPage, \"iVgBYRzRoLcEgreBBNOO0C3OzTo=\", false, function () {\n  return [useParams];\n});\n\n_c = PostPage;\n\nconst mapStateToProps = ({\n  socket,\n  post,\n  user\n}) => {\n  return {\n    socket: socket.socket,\n    userpost: post.post,\n    user: user.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  commentPost,\n  getPosts,\n  getSinglePost,\n  likePost,\n  unLikePost\n})(withRouter(PostPage));\n\nvar _c;\n\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/screens/PostPage/index.js"],"names":["React","useRef","useState","useEffect","useCallback","useHistory","useParams","withRouter","NavigationHeader","CommentList","Profile","ExploreCardMenu","MobileTabMenu","Card","Icon","moment","v4","uuidv4","commentPost","getPosts","getSinglePost","likePost","unLikePost","connect","PostPage","socket","user","userpost","history","postId","commentText","setCommentText","isLoading","setIsLoading","inputRef","focus","current","subscribe","error","console","log","message","likeFunc","_id","unlikeFunc","handleCommentPost","event","preventDefault","info","handleCommentTextChange","e","target","value","mapStateToProps","post","currentUser"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\n\nimport './style.scss';\nimport { useHistory, useParams, withRouter } from 'react-router-dom';\n\n// componnets\nimport NavigationHeader from '../../component/NavigationHeader';\nimport CommentList from '../../component/CommentList';\nimport Profile from '../../component/Profile';\nimport ExploreCardMenu from '../../component/ExplorePostCardMenu';\nimport MobileTabMenu from '../../component/MobileTabMenu';\nimport Card from '../../component/Cards/Card'\n\n// external liberires\nimport * as Icon from 'react-feather'\nimport moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid';\n\n\n// redux imports\nimport { commentPost, getPosts, getSinglePost, likePost, unLikePost } from '../../redux/Actions/postActions';\nimport { connect } from 'react-redux';\n\n\n\nfunction PostPage({ commentPost, socket, user, userpost, getSinglePost, history, likePost, unLikePost }) {\n\n    //    get postId from params\n    const { postId } = useParams();\n\n    //  states \n    const [commentText, setCommentText] = React.useState('');\n    const [isLoading, setIsLoading] = useState(true);\n    // const [isLikedButtonClicked, setIsLikedButtonClicked] = useState(false)\n    const inputRef = useRef()\n\n    const focus = () => {\n        inputRef.current.focus()\n    };\n\n\n    useEffect(async () => {\n        let subscribe = true;\n        if (subscribe) {\n            try {\n                await getSinglePost(postId)\n                setIsLoading(false)\n            } catch (error) {\n                console.log(error.message)\n            }\n\n        }\n        return () => subscribe = null;\n    }, [getSinglePost]);\n\n\n\n    //  @ functions  all functions defined here\n\n\n    const likeFunc = async () => {\n        try {\n            await likePost(userpost._id, socket, history)\n            // setIsLikedButtonClicked(true)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    const unlikeFunc = async () => {\n        try {\n            await unLikePost(userpost._id, socket, history)\n\n\n        } catch (error) {\n            console.error(error)\n        }\n    }\n    // const getUserPost = async (postId) => {\n    //     try {\n    //         await getSinglePost(postId)\n    //     } catch (error) {\n    //         console.log(error)\n    //     }\n    // };\n\n    const handleCommentPost = async (event) => {\n        event.preventDefault();\n        console.info('submitting btn')\n        try {\n            await commentPost(userpost._id, commentText, socket, history);\n            setCommentText('');\n\n\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    // const { location: { pathname, state } } = history;\n\n    const handleCommentTextChange = (e) => {\n        setCommentText(e.target.value)\n    }\n\n    if (isLoading && userpost == null) {\n        return <p>Loading...</p>\n    }\n\n    return (<h1> hello</h1>)\n    // return (\n    //     <div className=\"post-page\">\n\n    //        {}\n    //         <header>\n    //             <NavigationHeader />\n    //         </header>\n\n    //         <main>\n    //             <div className=\"post_content\">\n\n\n    //                 <div className=\"post_image\">\n    //                     <img src={userpost.postMedia} alt=\"image\" />\n    //                 </div>\n    //                 <div className=\"post_details\">\n    //                     <div className=\"profile\">\n    //                         <Profile image={userpost.author.avatar} iconSize=\"medium\" username={userpost.author.username} />\n    //                         <Icon.MoreHorizontal className=\"more-icon\" size={26} />\n    //                     </div>\n\n    //                     {/* comment section */}\n    //                     <div className=\"comment-section\">\n    //                         {userpost.comments.map((comment) => (\n    //                             <CommentList\n    //                                 key={uuidv4()}\n    //                                 accountName={comment.username}\n    //                                 comment={comment.commentText}\n    //                                 commentImage={comment.avatar}\n    //                                 commentTime={comment.date}\n    //                             />\n    //                         ))}\n\n    //                     </div>\n\n    //                     {/* icons*/}\n    //                     <div className=\"card_icon_menu\">\n    //                         <div className=\"card-menu\">\n    //                             <ExploreCardMenu\n    //                                 userpost={userpost}\n    //                                 focus={focus}\n    //                                 likeFunc={likeFunc}\n    //                                 // isLiked={isLikedButtonClicked}\n    //                                 unlikeFunc={unlikeFunc} />\n    //                         </div>\n    //                         {!userpost[0].likes.length ?\n    //                             <small className=\"like-title\"> Be the first to <b>like this</b></small>\n    //                             :\n    //                             <small>{userpost.likes.length} Likes</small>\n    //                         }\n\n\n    //                         <small className=\"post-date\">\n    //                             {\n    //                                 moment(userpost[0].date).format('MMM D')\n    //                             }\n    //                         </small>\n    //                     </div>\n\n    //                     {/*  add a comment form */}\n    //                     <form className=\"addComment\" onSubmit={handleCommentPost}>\n    //                         <input\n    //                             ref={inputRef}\n    //                             value={commentText}\n    //                             onChange={handleCommentTextChange}\n    //                             type=\"text\"\n    //                             placeholder=\"Add a comment...\"\n    //                             className=\"commentText\"\n    //                             name=\"commentText\"\n    //                         />\n    //                         <button\n\n    //                             disabled={commentText ? false : true}\n    //                             type=\"submit\"\n    //                             className=\"postText-btn\">Post</button>\n    //                     </form>\n\n    //                 </div>\n\n    //             </div>\n\n\n    //         </main>\n\n\n\n\n\n    //     </div>\n    // )\n}\nconst mapStateToProps = ({ socket, post, user }) => {\n    return {\n        socket: socket.socket,\n        userpost: post.post,\n        user: user.currentUser\n    }\n}\nexport default connect(mapStateToProps,\n    { commentPost, getPosts, getSinglePost, likePost, unLikePost }\n)(withRouter(PostPage))\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}