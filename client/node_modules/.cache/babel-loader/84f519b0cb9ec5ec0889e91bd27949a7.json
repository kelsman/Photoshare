{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mac/Documents/mern stack/photoShare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mac/Documents/mern stack/photoShare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{setToken}from'../../utils';import feedTypes from'./feedTypes';import axios from'axios';import cogoToast from'cogo-toast';import*as Routes from'../../component/routes';export var retrieveFeedPostsStart=function retrieveFeedPostsStart(history){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var token,config,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:token=localStorage.getItem('authToken');config={headers:{'Content-Type':'application/json'}};if(!token){_context.next=5;break;}_context.next=5;return setToken(token);case 5:_context.prev=5;_context.next=8;return axios.get(\"api/route/post/retrieveFeedPosts\",config);case 8:response=_context.sent;if(response){dispatch({type:feedTypes.FETCH_POSTS_SUCCESS,payload:response.data.posts});}_context.next=20;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](5);if(!_context.t0.response){_context.next=20;break;}console.log(_context.t0.response.data);_context.next=18;return dispatch({type:feedTypes.FETCH_POSTS_FAILURE,payload:_context.t0.response.data.msg});case 18:cogoToast.info(\"\".concat(_context.t0.response.data.msg),{position:'top-center'});if(_context.t0.response.data.msg==='jwt expired'||_context.t0.response.data.msg===\"you're not authorised\"){history.push('/');localStorage.removeItem('authToken');}case 20:case\"end\":return _context.stop();}}},_callee,null,[[5,12]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/feed/feedAction.js"],"names":["setToken","feedTypes","axios","cogoToast","Routes","retrieveFeedPostsStart","history","dispatch","token","localStorage","getItem","config","headers","get","response","type","FETCH_POSTS_SUCCESS","payload","data","posts","console","log","FETCH_POSTS_FAILURE","msg","info","position","push","removeItem"],"mappings":"6UAAA,OAASA,QAAT,KAAyB,aAAzB,CAEA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CAEA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAO,GAAKC,CAAAA,MAAZ,KAAwB,wBAAxB,CAEA,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,OAAD,iGAAa,iBAAOC,QAAP,4IAC3CC,KAD2C,CACnCC,YAAY,CAACC,OAAb,CAAqB,WAArB,CADmC,CAG3CC,MAH2C,CAGlC,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CADI,CAHkC,KAQ7CJ,KAR6C,+CASzCR,CAAAA,QAAQ,CAACQ,KAAD,CATiC,8CAYxBN,CAAAA,KAAK,CAACW,GAAN,oCAA8CF,MAA9C,CAZwB,QAYzCG,QAZyC,eAa/C,GAAIA,QAAJ,CAAc,CACZP,QAAQ,CAAC,CAAEQ,IAAI,CAAEd,SAAS,CAACe,mBAAlB,CAAuCC,OAAO,CAAEH,QAAQ,CAACI,IAAT,CAAcC,KAA9D,CAAD,CAAR,CACD,CAf8C,qFAiB3C,YAAML,QAjBqC,0BAkB7CM,OAAO,CAACC,GAAR,CAAY,YAAMP,QAAN,CAAeI,IAA3B,EAlB6C,uBAmBvCX,CAAAA,QAAQ,CAAC,CAAEQ,IAAI,CAAEd,SAAS,CAACqB,mBAAlB,CAAuCL,OAAO,CAAE,YAAMH,QAAN,CAAeI,IAAf,CAAoBK,GAApE,CAAD,CAnB+B,SAoB7CpB,SAAS,CAACqB,IAAV,WAAkB,YAAMV,QAAN,CAAeI,IAAf,CAAoBK,GAAtC,EAA6C,CAAEE,QAAQ,CAAE,YAAZ,CAA7C,EACA,GACE,YAAMX,QAAN,CAAeI,IAAf,CAAoBK,GAApB,GAA4B,aAA5B,EACA,YAAMT,QAAN,CAAeI,IAAf,CAAoBK,GAApB,0BAFF,CAGE,CACAjB,OAAO,CAACoB,IAAR,CAAa,GAAb,EACAjB,YAAY,CAACkB,UAAb,CAAwB,WAAxB,EACD,CA3B4C,qEAAb,gEAA/B","sourcesContent":["import { setToken } from '../../utils';\n\nimport feedTypes from './feedTypes';\n\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\n\nexport const retrieveFeedPostsStart = (history) => async (dispatch) => {\n  const token = localStorage.getItem('authToken');\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  if (token) {\n    await setToken(token);\n  }\n  try {\n    const response = await axios.get(`api/route/post/retrieveFeedPosts`, config);\n    if (response) {\n      dispatch({ type: feedTypes.FETCH_POSTS_SUCCESS, payload: response.data.posts });\n    }\n  } catch (error) {\n    if (error.response) {\n      console.log(error.response.data);\n      await dispatch({ type: feedTypes.FETCH_POSTS_FAILURE, payload: error.response.data.msg });\n      cogoToast.info(`${error.response.data.msg}`, { position: 'top-center' });\n      if (\n        error.response.data.msg === 'jwt expired' ||\n        error.response.data.msg === `you're not authorised`\n      ) {\n        history.push('/');\n        localStorage.removeItem('authToken');\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}