{"ast":null,"code":"import { suggestedUserTypes } from './ActionTypes';\nimport { setToken } from '../../utils';\nimport cogoToast from 'cogo-toast';\nimport axios from 'axios';\nconst token = localStorage.getItem('authToken');\nexport const getSuggestedUser = () => async dispatch => {\n  if (token) {\n    setToken(token);\n  }\n\n  try {\n    const response = await axios.get('api/route/user/suggestedUsers');\n\n    if (response) {\n      console.log(response.data);\n    }\n  } catch (error) {\n    if (error.response) {\n      cogoToast.error(`${error.message}`);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/SuggestedUsers/Actions.js"],"names":["suggestedUserTypes","setToken","cogoToast","axios","token","localStorage","getItem","getSuggestedUser","dispatch","response","get","console","log","data","error","message"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,eAAnC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAd;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACpD,MAAIJ,KAAJ,EAAW;AACPH,IAAAA,QAAQ,CAACG,KAAD,CAAR;AACH;;AACD,MAAI;AACA,UAAMK,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,+BAAV,CAAvB;;AACA,QAAID,QAAJ,EAAc;AACVE,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACH;AACJ,GALD,CAKE,OAAOC,KAAP,EAAc;AACZ,QAAIA,KAAK,CAACL,QAAV,EAAoB;AAChBP,MAAAA,SAAS,CAACY,KAAV,CAAiB,GAAEA,KAAK,CAACC,OAAQ,EAAjC;AACH;AACJ;AACJ,CAdM","sourcesContent":["import { suggestedUserTypes } from './ActionTypes'\nimport { setToken } from '../../utils'\nimport cogoToast from 'cogo-toast';\nimport axios from 'axios'\nconst token = localStorage.getItem('authToken');\n\nexport const getSuggestedUser = () => async dispatch => {\n    if (token) {\n        setToken(token)\n    }\n    try {\n        const response = await axios.get('api/route/user/suggestedUsers');\n        if (response) {\n            console.log(response.data)\n        }\n    } catch (error) {\n        if (error.response) {\n            cogoToast.error(`${error.message}`)\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}