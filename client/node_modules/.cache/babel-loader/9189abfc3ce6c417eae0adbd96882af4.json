{"ast":null,"code":"import { setToken } from '../../utils';\nimport feedTypes from './feedTypes';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\nexport const retrieveFeedPostsStart = history => async dispatch => {\n  const token = localStorage.getItem('authToken');\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    await setToken(token);\n  }\n\n  ;\n\n  try {\n    console.log('isFetching');\n    const response = await axios.get(`api/route/post/retrieveFeedPosts`, config);\n\n    if (response) {\n      dispatch({\n        type: feedTypes.FETCH_POSTS_SUCCESS,\n        payload: response.data.posts\n      });\n    }\n  } catch (error) {\n    if (error.response) {\n      console.log(error.response.data);\n      await dispatch({\n        type: feedTypes.FETCH_POSTS_FAILURE,\n        payload: error.response.data.msg\n      });\n      cogoToast.info(`${error.response.data.msg}`, {\n        position: 'top-center'\n      });\n\n      if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n        history.push('/');\n        localStorage.removeItem('authToken');\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/feed/feedAction.js"],"names":["setToken","feedTypes","axios","cogoToast","Routes","retrieveFeedPostsStart","history","dispatch","token","localStorage","getItem","config","headers","console","log","response","get","type","FETCH_POSTS_SUCCESS","payload","data","posts","error","FETCH_POSTS_FAILURE","msg","info","position","push","removeItem"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AAIA,OAAO,MAAMC,sBAAsB,GAAIC,OAAD,IAAa,MAAMC,QAAN,IAAkB;AAEjE,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAd;AAEA,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;;AAKA,MAAIJ,KAAJ,EAAW;AACP,UAAMR,QAAQ,CAACQ,KAAD,CAAd;AACH;;AAAA;;AACD,MAAI;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAW,kCAAX,EAA8CL,MAA9C,CAAvB;;AACA,QAAII,QAAJ,EAAc;AACVR,MAAAA,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAEhB,SAAS,CAACiB,mBAAlB;AAAuCC,QAAAA,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcC;AAA9D,OAAD,CAAR;AACH;AACJ,GAND,CAME,OAAOC,KAAP,EAAc;AACZ,QAAIA,KAAK,CAACP,QAAV,EAAoB;AAChBF,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAK,CAACP,QAAN,CAAeK,IAA3B;AACA,YAAMb,QAAQ,CAAC;AAAEU,QAAAA,IAAI,EAAEhB,SAAS,CAACsB,mBAAlB;AAAuCJ,QAAAA,OAAO,EAAEG,KAAK,CAACP,QAAN,CAAeK,IAAf,CAAoBI;AAApE,OAAD,CAAd;AACArB,MAAAA,SAAS,CAACsB,IAAV,CAAgB,GAAEH,KAAK,CAACP,QAAN,CAAeK,IAAf,CAAoBI,GAAI,EAA1C,EAA6C;AAAEE,QAAAA,QAAQ,EAAE;AAAZ,OAA7C;;AACA,UAAIJ,KAAK,CAACP,QAAN,CAAeK,IAAf,CAAoBI,GAApB,KAA4B,aAA5B,IAA6CF,KAAK,CAACP,QAAN,CAAeK,IAAf,CAAoBI,GAApB,KAA6B,uBAA9E,EAAsG;AAClGlB,QAAAA,OAAO,CAACqB,IAAR,CAAa,GAAb;AACAlB,QAAAA,YAAY,CAACmB,UAAb,CAAwB,WAAxB;AACH;AAEJ;AACJ;AACJ,CA9BM","sourcesContent":["import { setToken } from '../../utils'\n\nimport feedTypes from './feedTypes';\n\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\n\n\n\nexport const retrieveFeedPostsStart = (history) => async dispatch => {\n\n    const token = localStorage.getItem('authToken');\n\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }\n    if (token) {\n        await setToken(token)\n    };\n    try {\n        console.log('isFetching')\n        const response = await axios.get(`api/route/post/retrieveFeedPosts`, config)\n        if (response) {\n            dispatch({ type: feedTypes.FETCH_POSTS_SUCCESS, payload: response.data.posts })\n        }\n    } catch (error) {\n        if (error.response) {\n            console.log(error.response.data)\n            await dispatch({ type: feedTypes.FETCH_POSTS_FAILURE, payload: error.response.data.msg })\n            cogoToast.info(`${error.response.data.msg}`, { position: 'top-center' })\n            if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                history.push('/');\n                localStorage.removeItem('authToken');\n            }\n\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}