{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/mern stack/photoShare/client/src/screens/PostPage/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport './style.scss';\nimport { useHistory, useParams, withRouter } from 'react-router-dom'; // componnets\n\nimport NavigationHeader from '../../component/NavigationHeader';\nimport CommentList from '../../component/CommentList';\nimport Profile from '../../component/Profile';\nimport ExploreCardMenu from '../../component/ExplorePostCardMenu';\nimport MobileTabMenu from '../../component/MobileTabMenu';\nimport Card from '../../component/Cards/Card'; // external liberires\n\nimport * as Icon from 'react-feather';\nimport moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid'; // redux imports\n\nimport { commentPost, getPosts, getSinglePost, likePost } from '../../redux/Actions/postActions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PostPage({\n  commentPost,\n  socket,\n  user,\n  userpost,\n  getSinglePost,\n  history,\n  likePost\n}) {\n  _s();\n\n  //    get postId from params\n  const {\n    postId\n  } = useParams(); //  states\n\n  const [commentText, setCommentText] = React.useState('');\n  const [isLoading, setIsLoading] = useState(true); // const [isLikedButtonClicked, setIsLikedButtonClicked] = useState(false)\n\n  const inputRef = useRef();\n\n  const focus = () => {\n    inputRef.current.focus();\n  };\n\n  useEffect(() => {\n    let subscribe = true;\n\n    if (subscribe) {\n      (async function () {\n        try {\n          await getSinglePost(postId, history);\n          await setIsLoading(false);\n        } catch (error) {\n          console.log(error.message);\n        }\n      })();\n    }\n\n    return () => subscribe = null;\n  }, [getSinglePost, postId]); //  @ functions  all functions defined here\n\n  const likeFunc = async () => {\n    try {\n      await likePost(userpost._id, socket, history); // setIsLikedButtonClicked(true)\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleCommentPost = async event => {\n    event.preventDefault();\n    console.info('submitting btn');\n\n    try {\n      await commentPost(userpost._id, commentText, history);\n      setCommentText('');\n    } catch (error) {\n      console.log(error.message);\n    }\n  }; // const { location: { pathname, state } } = history;\n\n\n  const handleCommentTextChange = e => {\n    setCommentText(e.target.value);\n  };\n\n  if (isLoading && !userpost) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(NavigationHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post_content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post_image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: userpost.postMedia,\n            alt: \"image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post_details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profile\",\n            children: [/*#__PURE__*/_jsxDEV(Profile, {\n              image: userpost.author.avatar,\n              iconSize: \"medium\",\n              username: userpost.author.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Icon.MoreHorizontal, {\n              className: \"more-icon\",\n              size: 26\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-section\",\n            children: userpost.comments && userpost.comments.map(comment => /*#__PURE__*/_jsxDEV(CommentList, {\n              commentId: comment._id,\n              commentuser: comment._user,\n              commentText: comment.commentText,\n              userpost: userpost,\n              accountName: comment.username,\n              comment: comment.commentText,\n              commentImage: comment.avatar,\n              commentTime: comment.commentDate\n            }, uuidv4(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card_icon_menu\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-menu\",\n              children: /*#__PURE__*/_jsxDEV(ExploreCardMenu, {\n                userpost: userpost,\n                focus: focus,\n                likeFunc: likeFunc // isLiked={isLikedButtonClicked}\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), !userpost.likes ? /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"like-title\",\n              children: [' ', \"Be the first to \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"like this\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [userpost.likes.length, \" Likes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"post-date\",\n              children: moment(userpost.date).format('MMM D')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"addComment\",\n            onSubmit: handleCommentPost,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ref: inputRef,\n              value: commentText,\n              onChange: handleCommentTextChange,\n              type: \"text\",\n              placeholder: \"Add a comment...\",\n              className: \"commentText\",\n              name: \"commentText\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: commentText ? false : true,\n              type: \"submit\",\n              className: \"postText-btn\",\n              children: \"Post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostPage, \"iVgBYRzRoLcEgreBBNOO0C3OzTo=\", false, function () {\n  return [useParams];\n});\n\n_c = PostPage;\n\nconst mapStateToProps = ({\n  socket,\n  post,\n  user\n}) => {\n  return {\n    socket: socket.socket,\n    userpost: post.post,\n    user: user.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  commentPost,\n  getPosts,\n  getSinglePost,\n  likePost\n})(withRouter(PostPage));\n\nvar _c;\n\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/screens/PostPage/index.js"],"names":["React","useRef","useState","useEffect","useCallback","useHistory","useParams","withRouter","NavigationHeader","CommentList","Profile","ExploreCardMenu","MobileTabMenu","Card","Icon","moment","v4","uuidv4","commentPost","getPosts","getSinglePost","likePost","connect","PostPage","socket","user","userpost","history","postId","commentText","setCommentText","isLoading","setIsLoading","inputRef","focus","current","subscribe","error","console","log","message","likeFunc","_id","handleCommentPost","event","preventDefault","info","handleCommentTextChange","e","target","value","postMedia","author","avatar","username","comments","map","comment","_user","commentDate","likes","length","date","format","mapStateToProps","post","currentUser"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\n\nimport './style.scss';\nimport { useHistory, useParams, withRouter } from 'react-router-dom';\n\n// componnets\nimport NavigationHeader from '../../component/NavigationHeader';\nimport CommentList from '../../component/CommentList';\nimport Profile from '../../component/Profile';\nimport ExploreCardMenu from '../../component/ExplorePostCardMenu';\nimport MobileTabMenu from '../../component/MobileTabMenu';\nimport Card from '../../component/Cards/Card';\n\n// external liberires\nimport * as Icon from 'react-feather';\nimport moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid';\n\n// redux imports\nimport { commentPost, getPosts, getSinglePost, likePost } from '../../redux/Actions/postActions';\nimport { connect } from 'react-redux';\n\nfunction PostPage({ commentPost, socket, user, userpost, getSinglePost, history, likePost }) {\n  //    get postId from params\n  const { postId } = useParams();\n\n  //  states\n  const [commentText, setCommentText] = React.useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  // const [isLikedButtonClicked, setIsLikedButtonClicked] = useState(false)\n  const inputRef = useRef();\n\n  const focus = () => {\n    inputRef.current.focus();\n  };\n\n  useEffect(() => {\n    let subscribe = true;\n    if (subscribe) {\n      (async function () {\n        try {\n          await getSinglePost(postId, history);\n          await setIsLoading(false);\n        } catch (error) {\n          console.log(error.message);\n        }\n      }())\n\n    }\n    return () => (subscribe = null);\n  }, [getSinglePost, postId]);\n\n  //  @ functions  all functions defined here\n\n  const likeFunc = async () => {\n    try {\n      await likePost(userpost._id, socket, history);\n      // setIsLikedButtonClicked(true)\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleCommentPost = async (event) => {\n    event.preventDefault();\n    console.info('submitting btn');\n    try {\n      await commentPost(userpost._id, commentText, history);\n      setCommentText('');\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  // const { location: { pathname, state } } = history;\n\n  const handleCommentTextChange = (e) => {\n    setCommentText(e.target.value);\n  };\n\n  if (isLoading && !userpost) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <div className=\"post-page\">\n      <header>\n        <NavigationHeader />\n      </header>\n\n      <main>\n        <div className=\"post_content\">\n          <div className=\"post_image\">\n            <img src={userpost.postMedia} alt=\"image\" />\n          </div>\n          <div className=\"post_details\">\n            <div className=\"profile\">\n              <Profile\n                image={userpost.author.avatar}\n                iconSize=\"medium\"\n                username={userpost.author.username}\n              />\n              <Icon.MoreHorizontal className=\"more-icon\" size={26} />\n            </div>\n\n            {/* comment section */}\n            <div className=\"comment-section\">\n              {userpost.comments &&\n                userpost.comments.map((comment) => (\n                  <CommentList\n                    key={uuidv4()}\n                    commentId={comment._id}\n                    commentuser={comment._user}\n                    commentText={comment.commentText}\n                    userpost={userpost}\n                    accountName={comment.username}\n                    comment={comment.commentText}\n                    commentImage={comment.avatar}\n                    commentTime={comment.commentDate}\n                  />\n                ))}\n            </div>\n\n            {/* icons*/}\n            <div className=\"card_icon_menu\">\n              <div className=\"card-menu\">\n                <ExploreCardMenu\n                  userpost={userpost}\n                  focus={focus}\n                  likeFunc={likeFunc}\n                // isLiked={isLikedButtonClicked}\n                />\n              </div>\n              {!userpost.likes ? (\n                <small className=\"like-title\">\n                  {' '}\n                  Be the first to <b>like this</b>\n                </small>\n              ) : (\n                <small>{userpost.likes.length} Likes</small>\n              )}\n\n              <small className=\"post-date\">{moment(userpost.date).format('MMM D')}</small>\n            </div>\n\n            {/*  add a comment form */}\n            <form className=\"addComment\" onSubmit={handleCommentPost}>\n              <input\n                ref={inputRef}\n                value={commentText}\n                onChange={handleCommentTextChange}\n                type=\"text\"\n                placeholder=\"Add a comment...\"\n                className=\"commentText\"\n                name=\"commentText\"\n              />\n              <button disabled={commentText ? false : true} type=\"submit\" className=\"postText-btn\">\n                Post\n              </button>\n            </form>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\nconst mapStateToProps = ({ socket, post, user }) => {\n  return {\n    socket: socket.socket,\n    userpost: post.post,\n    user: user.currentUser,\n  };\n};\nexport default connect(mapStateToProps, { commentPost, getPosts, getSinglePost, likePost })(\n  withRouter(PostPage),\n);\n"]},"metadata":{},"sourceType":"module"}