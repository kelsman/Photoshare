{"ast":null,"code":"import { userActionTypes } from '../Constants/userConstants';\nimport { setToken } from '../../utils';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nconst baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\";\nexport const signup = (data, history) => {\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      cogoToast.loading('Registering....');\n      const response = await axios.post(`${baseUrl}/api/route/user/register`, config, data);\n\n      if (response) {\n        await dispatch({\n          type: userActionTypes.SIGN_UP_SUCESS,\n          payload: response.data\n        });\n        cogoToast.success('Register successfully');\n        history.push('/');\n      }\n    } catch (error) {\n      console.log(error.message);\n\n      if (error.response) {\n        await dispatch({\n          type: userActionTypes.SIGN_UP_FAIL,\n          payload: error.response.data\n        });\n        cogoToast.error(`${error.response.data.msg}`);\n      }\n    }\n  };\n};\nexport const signin = (data, history) => {\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const response = await axios.post(`${baseUrl}/api/route/user/login`, data, config);\n\n      if (response) {\n        await dispatch({\n          type: userActionTypes.LOG_IN_SUCCESS,\n          payload: response.data\n        });\n        await localStorage.setItem('authToken', response.data.jwtToken);\n        await cogoToast.success('sign in success', {\n          position: 'bottom-right'\n        });\n        history.push('/dashboard');\n      }\n    } catch (error) {\n      if (error.response) {\n        await dispatch({\n          type: userActionTypes.LOG_IN_FAIL,\n          payload: error.response.data\n        });\n      }\n    }\n  };\n};\nexport const loaduser = () => {\n  return async dispatch => {\n    if (localStorage.getItem('authToken')) ;\n    setToken(localStorage.getItem('authToken'));\n\n    try {\n      const response = await axios.get(\"http://localhost:9000/api/route/user/getUser\");\n\n      if (response) {\n        await dispatch({\n          type: userActionTypes.LOAD_USER_SUCCESS,\n          payload: response.data.user\n        });\n      }\n    } catch (error) {\n      if (error.response) {\n        await dispatch({\n          type: userActionTypes.LOAD_USER_FAIL,\n          payload: error.response.data\n        });\n        localStorage.removeItem('authToken');\n        console.log(error.response);\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/Actions/userActions.js"],"names":["userActionTypes","setToken","axios","cogoToast","baseUrl","process","env","REACT_APP_BASE_URL","signup","data","history","dispatch","config","headers","loading","response","post","type","SIGN_UP_SUCESS","payload","success","push","error","console","log","message","SIGN_UP_FAIL","msg","signin","LOG_IN_SUCCESS","localStorage","setItem","jwtToken","position","LOG_IN_FAIL","loaduser","getItem","get","LOAD_USER_SUCCESS","user","LOAD_USER_FAIL","removeItem"],"mappings":"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","sourcesContent":["import { userActionTypes } from '../Constants/userConstants';\nimport { setToken } from '../../utils'\n\n\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\"\n\n\nexport const signup = (data, history) => {\n    return async (dispatch) => {\n        try {\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n            cogoToast.loading('Registering....')\n            const response = await axios.post(`${baseUrl}/api/route/user/register`, config, data);\n            if (response) {\n                await dispatch({ type: userActionTypes.SIGN_UP_SUCESS, payload: response.data });\n                cogoToast.success('Register successfully');\n                history.push('/')\n            }\n        } catch (error) {\n            console.log(error.message)\n            if (error.response) {\n                await dispatch({ type: userActionTypes.SIGN_UP_FAIL, payload: error.response.data })\n                cogoToast.error(`${error.response.data.msg}`)\n            }\n        }\n    }\n};\n\nexport const signin = (data, history) => {\n    return async (dispatch) => {\n\n        try {\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            };\n            const response = await axios.post(`${baseUrl}/api/route/user/login`, data, config);\n            if (response) {\n                await dispatch({ type: userActionTypes.LOG_IN_SUCCESS, payload: response.data });\n                await localStorage.setItem('authToken', response.data.jwtToken);\n                await cogoToast.success('sign in success', { position: 'bottom-right' });\n                history.push('/dashboard');\n            }\n        } catch (error) {\n            if (error.response) {\n                await dispatch({ type: userActionTypes.LOG_IN_FAIL, payload: error.response.data });\n            }\n        }\n    }\n};\n\nexport const loaduser = () => {\n\n    return async (dispatch) => {\n        if (localStorage.getItem('authToken'));\n        setToken(localStorage.getItem('authToken'));\n        try {\n            const response = await axios.get(\"http://localhost:9000/api/route/user/getUser\");\n            if (response) {\n                await dispatch({ type: userActionTypes.LOAD_USER_SUCCESS, payload: response.data.user })\n\n            }\n        } catch (error) {\n            if (error.response) {\n                await dispatch({ type: userActionTypes.LOAD_USER_FAIL, payload: error.response.data })\n                localStorage.removeItem('authToken');\n                console.log(error.response)\n            }\n\n        }\n    }\n};"]},"metadata":{},"sourceType":"module"}