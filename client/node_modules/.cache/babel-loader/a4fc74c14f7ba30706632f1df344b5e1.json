{"ast":null,"code":"import * as postActionTypes from '../Constants/postConstants';\nimport { setToken } from '../../utils';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\nconst token = localStorage.getItem('authToken');\nconst baseUrl = process.env.REACT_APP_BASE_URL || 'http://localhost:9000'; // @create post\n\nexport const createPostFunc = (data, history) => {\n  const token = localStorage.getItem('authToken');\n  return async dispatch => {\n    try {\n      if (token) {\n        await setToken(token);\n      }\n\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      cogoToast.loading('posting');\n      const response = await axios.post('/api/route/post/createPost', data, config);\n\n      if (response) {\n        await dispatch({\n          type: postActionTypes.CREATE_POST_SUCCESS,\n          payload: response.data.msg\n        });\n        cogoToast.success('post created');\n      }\n    } catch (error) {\n      if (error.response) {\n        cogoToast.error(`${error.response.data.msg}`);\n        await dispatch({\n          type: postActionTypes.CREATE_POST_FAIL,\n          payload: error.response.data\n        });\n\n        if (error.response.data.msg === 'jwt expired' || error.response.data.msg === `you're not authorised`) {\n          history.push('/');\n          localStorage.removeItem('authToken');\n          cogoToast.info('session expired');\n        }\n      }\n    }\n  };\n}; //  load explore posts\n\nexport const getPosts = history => {\n  return async dispatch => {\n    const token = localStorage.getItem('authToken');\n\n    try {\n      if (token) {\n        await setToken(token);\n      }\n\n      const response = await axios.get(`/api/route/post/retrieveExplorePost`);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.GET_POSTS_SUCCESS,\n          payload: response.data.posts\n        });\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.GET_POSTS_FAIL,\n          payload: error.response.data\n        });\n\n        if (error.response.data.msg === 'jwt expired' || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        } // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n\n      }\n    }\n  };\n}; //  @comment on a post with a given post id passed as a param to the url\n\nexport const commentPost = (postId, commentText, socket, history) => {\n  return async dispatch => {\n    if (token) {\n      await setToken(token);\n    }\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const response = await axios.post(`/api/route/post/comment/${postId}`, {\n        commentText\n      });\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.COMMENT_POST_SUCCESS,\n          payload: response.data.data\n        });\n        console.log(response.data.data);\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.COMMENT_POST_FAIL,\n          payload: error.response.data.msg\n        });\n\n        if (error.response.data.msg === 'jwt expired' || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        } // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n\n      }\n    }\n  };\n}; // @delete a commment\n\nexport const deleteComment = (postid, commentid, history) => async dispatch => {\n  try {\n    if (token) {\n      await setToken(token);\n    }\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const response = await axios.put(`/api/route/post/deleteComment/${postid}/${commentid}`, config);\n\n    if (response) {\n      console.log(response.data);\n      dispatch({\n        type: postActionTypes.DELETE_COMMENT_SUCCESS,\n        payload: response.data.data\n      });\n    }\n  } catch (error) {\n    if (error.response) {\n      console.log(error.response.data);\n      await dispatch({\n        type: postActionTypes.DELETE_COMMENT_FAIL,\n        payload: error.response.data.msg\n      });\n\n      if (error.response.data.msg === 'jwt expired' || error.response.data.msg === `you're not authorised`) {\n        localStorage.removeItem('authToken');\n        history.push('/');\n      }\n    }\n  }\n};\nexport const getSinglePost = (postId, history) => {\n  return async dispatch => {\n    if (token) {\n      await setToken(token);\n    }\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const response = await axios.get(`/api/route/post/singlePost/${postId}`, config);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.GET_SINGLE_POST_SUCCESS,\n          payload: response.data.post[0]\n        });\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.GET_SINGLE_POST_FAIL,\n          payload: error.response.data.msg\n        });\n\n        if (error.response.data.msg === 'jwt expired' || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        }\n      }\n    }\n  };\n}; //  like & unlike  a post\n\nexport const likePost = (postId, socket, history) => {\n  return async dispatch => {\n    const token = localStorage.getItem('authToken');\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    if (token) {\n      await setToken(token);\n    }\n\n    try {\n      const response = await axios.put(`/api/route/post/likePost/${postId}`, config);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.LIKE_POST_SUCCESS,\n          payload: response.data.data\n        });\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.LIKE_POST_FAIL,\n          payload: error.response.data.msg\n        });\n        cogoToast.info(`${error.response.data.msg}`, {\n          position: 'top-center'\n        });\n\n        if (error.response.data.msg === 'jwt expired' || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        }\n      }\n    }\n  };\n}; //  load feed posts\n\nexport const retrieveFeedPosts = history => async dispatch => {\n  const token = localStorage.getItem('authToken');\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    await setToken(token);\n  }\n\n  try {\n    const response = await axios.get(`api/route/post/retrieveFeedPosts`, config);\n\n    if (response) {\n      console.log(response.data);\n      dispatch({\n        type: postActionTypes.GET_FEEDS_SUCCESS,\n        payload: response.data.posts\n      });\n    }\n  } catch (error) {\n    if (error.response) {\n      console.log(error.response.data);\n      await dispatch({\n        type: postActionTypes.GET_FEEDS_FAIL,\n        payload: error.response.data.msg\n      });\n      cogoToast.info(`${error.response.data.msg}`, {\n        position: 'top-center'\n      });\n\n      if (error.response.data.msg === 'jwt expired' || error.response.data.msg === `you're not authorised`) {\n        history.push('/');\n        localStorage.removeItem('authToken');\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/Actions/postActions.js"],"names":["postActionTypes","setToken","axios","cogoToast","Routes","token","localStorage","getItem","baseUrl","process","env","REACT_APP_BASE_URL","createPostFunc","data","history","dispatch","config","headers","loading","response","post","type","CREATE_POST_SUCCESS","payload","msg","success","error","CREATE_POST_FAIL","push","removeItem","info","getPosts","get","GET_POSTS_SUCCESS","posts","console","log","GET_POSTS_FAIL","commentPost","postId","commentText","socket","COMMENT_POST_SUCCESS","COMMENT_POST_FAIL","deleteComment","postid","commentid","put","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAIL","getSinglePost","GET_SINGLE_POST_SUCCESS","GET_SINGLE_POST_FAIL","likePost","LIKE_POST_SUCCESS","LIKE_POST_FAIL","position","retrieveFeedPosts","GET_FEEDS_SUCCESS","GET_FEEDS_FAIL"],"mappings":"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","sourcesContent":["import * as postActionTypes from '../Constants/postConstants';\nimport { setToken } from '../../utils';\n\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\n\nconst token = localStorage.getItem('authToken');\n\nconst baseUrl = process.env.REACT_APP_BASE_URL || 'http://localhost:9000';\n\n// @create post\n\nexport const createPostFunc = (data, history) => {\n  const token = localStorage.getItem('authToken');\n  return async (dispatch) => {\n    try {\n      if (token) {\n        await setToken(token);\n      }\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      };\n      cogoToast.loading('posting');\n      const response = await axios.post('/api/route/post/createPost', data, config);\n      if (response) {\n        await dispatch({ type: postActionTypes.CREATE_POST_SUCCESS, payload: response.data.msg });\n        cogoToast.success('post created');\n      }\n    } catch (error) {\n      if (error.response) {\n        cogoToast.error(`${error.response.data.msg}`);\n        await dispatch({ type: postActionTypes.CREATE_POST_FAIL, payload: error.response.data });\n        if (\n          error.response.data.msg === 'jwt expired' ||\n          error.response.data.msg === `you're not authorised`\n        ) {\n          history.push('/');\n          localStorage.removeItem('authToken');\n          cogoToast.info('session expired');\n        }\n      }\n    }\n  };\n};\n\n//  load explore posts\nexport const getPosts = (history) => {\n  return async (dispatch) => {\n    const token = localStorage.getItem('authToken');\n    try {\n      if (token) {\n        await setToken(token);\n      }\n\n      const response = await axios.get(`/api/route/post/retrieveExplorePost`);\n      if (response) {\n        dispatch({ type: postActionTypes.GET_POSTS_SUCCESS, payload: response.data.posts });\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({ type: postActionTypes.GET_POSTS_FAIL, payload: error.response.data });\n        if (\n          error.response.data.msg === 'jwt expired' ||\n          error.response.data.msg === `you're not authorised`\n        ) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        }\n        // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n      }\n    }\n  };\n};\n\n//  @comment on a post with a given post id passed as a param to the url\nexport const commentPost = (postId, commentText, socket, history) => {\n  return async (dispatch) => {\n    if (token) {\n      await setToken(token);\n    }\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      const response = await axios.post(`/api/route/post/comment/${postId}`, { commentText });\n      if (response) {\n        dispatch({ type: postActionTypes.COMMENT_POST_SUCCESS, payload: response.data.data });\n        console.log(response.data.data);\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.COMMENT_POST_FAIL,\n          payload: error.response.data.msg,\n        });\n        if (\n          error.response.data.msg === 'jwt expired' ||\n          error.response.data.msg === `you're not authorised`\n        ) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        }\n        // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n      }\n    }\n  };\n};\n\n// @delete a commment\n\nexport const deleteComment = (postid, commentid, history) => async (dispatch) => {\n  try {\n    if (token) {\n      await setToken(token);\n    }\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const response = await axios.put(\n      `/api/route/post/deleteComment/${postid}/${commentid}`,\n      config,\n    );\n    if (response) {\n      console.log(response.data);\n      dispatch({ type: postActionTypes.DELETE_COMMENT_SUCCESS, payload: response.data.data });\n    }\n  } catch (error) {\n    if (error.response) {\n      console.log(error.response.data);\n      await dispatch({\n        type: postActionTypes.DELETE_COMMENT_FAIL,\n        payload: error.response.data.msg,\n      });\n      if (\n        error.response.data.msg === 'jwt expired' ||\n        error.response.data.msg === `you're not authorised`\n      ) {\n        localStorage.removeItem('authToken');\n        history.push('/');\n      }\n    }\n  }\n};\n\nexport const getSinglePost = (postId, history) => {\n  return async (dispatch) => {\n    if (token) {\n      await setToken(token);\n    }\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    try {\n      const response = await axios.get(`/api/route/post/singlePost/${postId}`, config);\n      if (response) {\n        dispatch({ type: postActionTypes.GET_SINGLE_POST_SUCCESS, payload: response.data.post[0] });\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.GET_SINGLE_POST_FAIL,\n          payload: error.response.data.msg,\n        });\n        if (\n          error.response.data.msg === 'jwt expired' ||\n          error.response.data.msg === `you're not authorised`\n        ) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        }\n      }\n    }\n  };\n};\n\n//  like & unlike  a post\n\nexport const likePost = (postId, socket, history) => {\n  return async (dispatch) => {\n    const token = localStorage.getItem('authToken');\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    if (token) {\n      await setToken(token);\n    }\n    try {\n      const response = await axios.put(`/api/route/post/likePost/${postId}`, config);\n      if (response) {\n        dispatch({ type: postActionTypes.LIKE_POST_SUCCESS, payload: response.data.data });\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({ type: postActionTypes.LIKE_POST_FAIL, payload: error.response.data.msg });\n        cogoToast.info(`${error.response.data.msg}`, { position: 'top-center' });\n        if (\n          error.response.data.msg === 'jwt expired' ||\n          error.response.data.msg === `you're not authorised`\n        ) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        }\n      }\n    }\n  };\n};\n\n//  load feed posts\n\nexport const retrieveFeedPosts = (history) => async (dispatch) => {\n  const token = localStorage.getItem('authToken');\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  if (token) {\n    await setToken(token);\n  }\n  try {\n    const response = await axios.get(`api/route/post/retrieveFeedPosts`, config);\n    if (response) {\n      console.log(response.data);\n      dispatch({ type: postActionTypes.GET_FEEDS_SUCCESS, payload: response.data.posts });\n    }\n  } catch (error) {\n    if (error.response) {\n      console.log(error.response.data);\n      await dispatch({ type: postActionTypes.GET_FEEDS_FAIL, payload: error.response.data.msg });\n      cogoToast.info(`${error.response.data.msg}`, { position: 'top-center' });\n      if (\n        error.response.data.msg === 'jwt expired' ||\n        error.response.data.msg === `you're not authorised`\n      ) {\n        history.push('/');\n        localStorage.removeItem('authToken');\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}