{"ast":null,"code":"import * as postActionTypes from '../Constants/postConstants';\nimport { setToken } from '../../utils';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\nconst token = localStorage.getItem('authToken');\nconst baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\"; //  load explore posts \n\nexport const getPosts = history => {\n  return async dispatch => {\n    const token = localStorage.getItem('authToken');\n\n    try {\n      if (token) {\n        await setToken(token);\n      }\n\n      ;\n      const response = await axios.get(`/api/route/post/retrieveExplorePost`);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.GET_POSTS_SUCCESS,\n          payload: response.data.posts\n        });\n      }\n\n      ;\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.GET_POSTS_FAIL,\n          payload: error.response.data\n        });\n\n        if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        } // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n\n      }\n    }\n  };\n}; //  @comment on a post with a given post id passed as a param to the url\n\nexport const commentPost = (postId, commentText, socket, history) => {\n  return async dispatch => {\n    if (token) {\n      await setToken(token);\n    }\n\n    ;\n\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const response = await axios.post(`/api/route/post/comment/${postId}`, {\n        commentText\n      });\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.COMMENT_POST_SUCCESS,\n          payload: response.data.data\n        });\n      }\n\n      ;\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.COMMENT_POST_FAIL,\n          payload: error.response.data.msg\n        });\n\n        if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        } // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n\n      }\n    }\n  };\n}; // @delete a commment \n\nexport const deleteComment = (postid, commentid, history) => async dispatch => {\n  try {\n    if (token) {\n      await setToken(token);\n    }\n\n    ;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const response = await axios.put(`/api/route/post/deleteComment/${postid}/${commentid}`, config);\n\n    if (response) {\n      console.log(response.data);\n      dispatch({\n        type: postActionTypes.DELETE_COMMENT_SUCCESS,\n        payload: response.data.data\n      });\n    }\n  } catch (error) {\n    if (error.response) {\n      console.log(error.response.data);\n      await dispatch({\n        type: postActionTypes.DELETE_COMMENT_FAIL,\n        payload: error.response.data.msg\n      });\n\n      if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n        localStorage.removeItem('authToken');\n        history.push('/');\n      }\n    }\n  }\n};\nexport const getSinglePost = (postId, history) => {\n  return async dispatch => {\n    if (token) {\n      await setToken(token);\n    }\n\n    ;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const response = await axios.get(`/api/route/post/singlePost/${postId}`, config);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.GET_SINGLE_POST_SUCCESS,\n          payload: response.data.post[0]\n        });\n      }\n\n      ;\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.GET_SINGLE_POST_FAIL,\n          payload: error.response.data.msg\n        });\n\n        if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        }\n      }\n    }\n  };\n}; //  like & unlike  a post \n\nexport const likePost = (postId, socket, history) => {\n  return async dispatch => {\n    const token = localStorage.getItem('authToken');\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    if (token) {\n      await setToken(token);\n    }\n\n    ;\n\n    try {\n      const response = await axios.put(`/api/route/post/likePost/${postId}`, config);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.LIKE_POST_SUCCESS,\n          payload: response.data.data\n        });\n      }\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.LIKE_POST_FAIL,\n          payload: error.response.data.msg\n        });\n        cogoToast.info(`${error.response.data.msg}`, {\n          position: 'top-center'\n        });\n\n        if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/Actions/postActions.js"],"names":["postActionTypes","setToken","axios","cogoToast","Routes","token","localStorage","getItem","baseUrl","process","env","REACT_APP_BASE_URL","getPosts","history","dispatch","response","get","type","GET_POSTS_SUCCESS","payload","data","posts","error","console","log","GET_POSTS_FAIL","msg","removeItem","push","commentPost","postId","commentText","socket","config","headers","post","COMMENT_POST_SUCCESS","COMMENT_POST_FAIL","deleteComment","postid","commentid","put","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_FAIL","getSinglePost","GET_SINGLE_POST_SUCCESS","GET_SINGLE_POST_FAIL","likePost","LIKE_POST_SUCCESS","LIKE_POST_FAIL","info","position"],"mappings":"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","sourcesContent":["import * as postActionTypes from '../Constants/postConstants';\nimport { setToken } from '../../utils'\n\n\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\n\nconst token = localStorage.getItem('authToken');\n\nconst baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\"\n\n\n\n//  load explore posts \nexport const getPosts = (history) => {\n    return async (dispatch) => {\n        const token = localStorage.getItem('authToken')\n        try {\n            if (token) {\n                await setToken(token)\n            };\n            const response = await axios.get(`/api/route/post/retrieveExplorePost`);\n            if (response) {\n                dispatch({ type: postActionTypes.GET_POSTS_SUCCESS, payload: response.data.posts })\n\n            };\n\n        } catch (error) {\n            if (error.response) {\n                console.log(error.response.data)\n                await dispatch({ type: postActionTypes.GET_POSTS_FAIL, payload: error.response.data })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    localStorage.removeItem('authToken');\n                    history.push('/')\n                }\n                // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n            }\n        }\n\n    }\n}\n\n\n\n//  @comment on a post with a given post id passed as a param to the url\nexport const commentPost = (postId, commentText, socket, history) => {\n    return async (dispatch) => {\n        if (token) {\n            await setToken(token)\n        };\n\n        try {\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n            const response = await axios.post(`/api/route/post/comment/${postId}`, { commentText });\n            if (response) {\n\n                dispatch({ type: postActionTypes.COMMENT_POST_SUCCESS, payload: response.data.data })\n            };\n\n        } catch (error) {\n            if (error.response) {\n                console.log(error.response.data)\n                await dispatch({ type: postActionTypes.COMMENT_POST_FAIL, payload: error.response.data.msg })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    localStorage.removeItem('authToken');\n                    history.push('/')\n                }\n                // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n            }\n        }\n    }\n}\n\n// @delete a commment \n\nexport const deleteComment = (postid, commentid, history) => async dispatch => {\n\n    try {\n        if (token) {\n            await setToken(token)\n        };\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n\n        const response = await axios.put(`/api/route/post/deleteComment/${postid}/${commentid}`, config)\n        if (response) {\n            console.log(response.data)\n            dispatch({ type: postActionTypes.DELETE_COMMENT_SUCCESS, payload: response.data.data })\n        }\n    } catch (error) {\n        if (error.response) {\n            console.log(error.response.data)\n            await dispatch({ type: postActionTypes.DELETE_COMMENT_FAIL, payload: error.response.data.msg })\n            if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                localStorage.removeItem('authToken');\n                history.push('/');\n\n            }\n        }\n    }\n}\n\nexport const getSinglePost = (postId, history) => {\n\n    return async (dispatch) => {\n\n        if (token) {\n            await setToken(token)\n        };\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        try {\n            const response = await axios.get(`/api/route/post/singlePost/${postId}`, config)\n            if (response) {\n                dispatch({ type: postActionTypes.GET_SINGLE_POST_SUCCESS, payload: response.data.post[0] })\n\n            };\n\n        } catch (error) {\n            if (error.response) {\n                console.log(error.response.data)\n                await dispatch({ type: postActionTypes.GET_SINGLE_POST_FAIL, payload: error.response.data.msg })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    localStorage.removeItem('authToken');\n                    history.push('/');\n\n                }\n            }\n        }\n    }\n}\n\n\n\n//  like & unlike  a post \n\nexport const likePost = (postId, socket, history) => {\n\n    return async (dispatch) => {\n\n        const token = localStorage.getItem('authToken');\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        if (token) {\n            await setToken(token)\n        };\n        try {\n            const response = await axios.put(`/api/route/post/likePost/${postId}`, config);\n            if (response) {\n\n                dispatch({ type: postActionTypes.LIKE_POST_SUCCESS, payload: response.data.data })\n\n            }\n        } catch (error) {\n            if (error.response) {\n                console.log(error.response.data)\n                await dispatch({ type: postActionTypes.LIKE_POST_FAIL, payload: error.response.data.msg })\n                cogoToast.info(`${error.response.data.msg}`, { position: 'top-center' })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    localStorage.removeItem('authToken');\n                    history.push('/');\n                }\n\n            }\n\n        }\n\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}