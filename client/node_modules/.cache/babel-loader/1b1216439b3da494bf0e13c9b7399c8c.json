{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/mern stack/photoShare/client/src/screens/PostPage/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport './style.scss';\nimport { useHistory, useParams, withRouter } from 'react-router-dom'; // componnets\n\nimport NavigationHeader from '../../component/NavigationHeader';\nimport CommentList from '../../component/CommentList';\nimport Profile from '../../component/Profile';\nimport CardMenu from '../../component/Cards/CardMenu';\nimport MobileTabMenu from '../../component/MobileTabMenu';\nimport Card from '../../component/Cards/Card'; // external liberires\n\nimport * as Icon from 'react-feather';\nimport moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid'; // redux imports\n\nimport { commentPost, getPosts, getSinglePost, likePost, unLikePost } from '../../redux/Actions/postActions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PostPage({\n  commentPost,\n  socket,\n  getPosts,\n  user,\n  userpost,\n  getSinglePost,\n  history,\n  likePost,\n  unLikePost\n}) {\n  _s();\n\n  //    get postId from params\n  const {\n    postId\n  } = useParams(); //  states \n\n  const [commentText, setCommentText] = React.useState('');\n  const [isLoading, setIsLoading] = useState(true); // const [isLikedButtonClicked, setIsLikedButtonClicked] = useState(false)\n\n  const inputRef = useRef();\n\n  const focus = () => {\n    inputRef.current.focus();\n  };\n\n  useEffect(async () => {\n    let subscribe = true;\n\n    if (subscribe) {\n      try {\n        await getSinglePost(postId);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n\n    return () => subscribe = null;\n  }, [getSinglePost]); //  @ functions  all functions defined here\n\n  const likeFunc = async () => {\n    try {\n      await likePost(userpost._id, socket, history); // setIsLikedButtonClicked(true)\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const unlikeFunc = async () => {\n    try {\n      await unLikePost(userpost._id, socket, history);\n    } catch (error) {\n      console.error(error);\n    }\n  }; // const getUserPost = async (postId) => {\n  //     try {\n  //         await getSinglePost(postId)\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // };\n\n\n  const handleCommentPost = async event => {\n    event.preventDefault();\n    console.info('submitting btn');\n\n    try {\n      await commentPost(userpost._id, commentText, socket, history);\n      setCommentText('');\n    } catch (error) {\n      console.log(error.message);\n    }\n  }; // const { location: { pathname, state } } = history;\n\n\n  const handleCommentTextChange = e => {\n    setCommentText(e.target.value);\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(NavigationHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post_content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post_image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: userpost.postMedia,\n            alt: \"image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post_details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profile\",\n            children: [/*#__PURE__*/_jsxDEV(Profile, {\n              image: userpost.postedBy.avatar,\n              iconSize: \"medium\",\n              username: userpost.postedBy.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Icon.MoreHorizontal, {\n              className: \"more-icon\",\n              size: 26\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment-section\",\n            children: userpost.comments.map(comment => /*#__PURE__*/_jsxDEV(CommentList, {\n              accountName: comment.name,\n              comment: comment.text,\n              commentImage: comment.avatar,\n              commentTime: comment.date\n            }, uuidv4(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card_icon_menu\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-menu\",\n              children: /*#__PURE__*/_jsxDEV(CardMenu, {\n                userpost: userpost,\n                focus: focus,\n                likeFunc: likeFunc // isLiked={isLikedButtonClicked}\n                ,\n                unlikeFunc: unlikeFunc\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this), !userpost.likes.length ? /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"like-title\",\n              children: [\" Be the first to \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"like this\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 80\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [userpost.likes.length, \" Likes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"post-date\",\n              children: moment(userpost.date).format('MMM D')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"addComment\",\n            onSubmit: handleCommentPost,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ref: inputRef,\n              value: commentText,\n              onChange: handleCommentTextChange,\n              type: \"text\",\n              placeholder: \"Add a comment...\",\n              className: \"commentText\",\n              name: \"commentText\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: commentText ? false : true,\n              type: \"submit\",\n              className: \"postText-btn\",\n              children: \"Post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PostPage, \"iVgBYRzRoLcEgreBBNOO0C3OzTo=\", false, function () {\n  return [useParams];\n});\n\n_c = PostPage;\n\nconst mapStateToProps = ({\n  socket,\n  post,\n  user\n}) => {\n  return {\n    socket: socket.socket,\n    userpost: post.post,\n    user: user.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  commentPost,\n  getPosts,\n  getSinglePost,\n  likePost,\n  unLikePost\n})(withRouter(PostPage));\n\nvar _c;\n\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/screens/PostPage/index.js"],"names":["React","useRef","useState","useEffect","useHistory","useParams","withRouter","NavigationHeader","CommentList","Profile","CardMenu","MobileTabMenu","Card","Icon","moment","v4","uuidv4","commentPost","getPosts","getSinglePost","likePost","unLikePost","connect","PostPage","socket","user","userpost","history","postId","commentText","setCommentText","isLoading","setIsLoading","inputRef","focus","current","subscribe","error","console","log","message","likeFunc","_id","unlikeFunc","handleCommentPost","event","preventDefault","info","handleCommentTextChange","e","target","value","postMedia","postedBy","avatar","username","comments","map","comment","name","text","date","likes","length","format","mapStateToProps","post","currentUser"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nimport './style.scss';\nimport { useHistory, useParams, withRouter } from 'react-router-dom';\n\n// componnets\nimport NavigationHeader from '../../component/NavigationHeader';\nimport CommentList from '../../component/CommentList';\nimport Profile from '../../component/Profile';\nimport CardMenu from '../../component/Cards/CardMenu';\nimport MobileTabMenu from '../../component/MobileTabMenu';\nimport Card from '../../component/Cards/Card'\n\n// external liberires\nimport * as Icon from 'react-feather'\nimport moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid';\n\n\n// redux imports\nimport { commentPost, getPosts, getSinglePost, likePost, unLikePost } from '../../redux/Actions/postActions';\nimport { connect } from 'react-redux';\n\n\n\nfunction PostPage({ commentPost, socket, getPosts, user, userpost, getSinglePost, history, likePost, unLikePost }) {\n\n    //    get postId from params\n    const { postId } = useParams();\n\n    //  states \n    const [commentText, setCommentText] = React.useState('');\n    const [isLoading, setIsLoading] = useState(true);\n    // const [isLikedButtonClicked, setIsLikedButtonClicked] = useState(false)\n    const inputRef = useRef()\n\n    const focus = () => {\n        inputRef.current.focus()\n    };\n\n\n    useEffect(async () => {\n        let subscribe = true;\n        if (subscribe) {\n            try {\n                await getSinglePost(postId)\n                setIsLoading(false)\n            } catch (error) {\n                console.log(error.message)\n            }\n\n        }\n        return () => subscribe = null;\n    }, [getSinglePost]);\n\n\n\n    //  @ functions  all functions defined here\n\n\n    const likeFunc = async () => {\n        try {\n            await likePost(userpost._id, socket, history)\n            // setIsLikedButtonClicked(true)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    const unlikeFunc = async () => {\n        try {\n            await unLikePost(userpost._id, socket, history)\n\n\n        } catch (error) {\n            console.error(error)\n        }\n    }\n    // const getUserPost = async (postId) => {\n    //     try {\n    //         await getSinglePost(postId)\n    //     } catch (error) {\n    //         console.log(error)\n    //     }\n    // };\n\n    const handleCommentPost = async (event) => {\n        event.preventDefault();\n        console.info('submitting btn')\n        try {\n            await commentPost(userpost._id, commentText, socket, history);\n            setCommentText('');\n\n\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    // const { location: { pathname, state } } = history;\n\n    const handleCommentTextChange = (e) => {\n        setCommentText(e.target.value)\n    }\n\n    if (isLoading) {\n        return <p>Loading...</p>\n    }\n    return (\n        <div className=\"post-page\">\n\n\n            <header>\n                <NavigationHeader />\n            </header>\n\n            <main>\n                <div className=\"post_content\">\n\n\n                    <div className=\"post_image\">\n                        <img src={userpost.postMedia} alt=\"image\" />\n                    </div>\n                    <div className=\"post_details\">\n                        <div className=\"profile\">\n                            <Profile image={userpost.postedBy.avatar} iconSize=\"medium\" username={userpost.postedBy.username} />\n                            <Icon.MoreHorizontal className=\"more-icon\" size={26} />\n                        </div>\n\n                        {/* comment section */}\n                        <div className=\"comment-section\">\n                            {userpost.comments.map((comment) => (\n                                <CommentList\n                                    key={uuidv4()}\n                                    accountName={comment.name}\n                                    comment={comment.text}\n                                    commentImage={comment.avatar}\n                                    commentTime={comment.date}\n                                />\n                            ))}\n\n                        </div>\n\n                        {/* icons*/}\n                        <div className=\"card_icon_menu\">\n                            <div className=\"card-menu\">\n                                <CardMenu\n                                    userpost={userpost}\n                                    focus={focus}\n                                    likeFunc={likeFunc}\n                                    // isLiked={isLikedButtonClicked}\n                                    unlikeFunc={unlikeFunc} />\n                            </div>\n                            {!userpost.likes.length ?\n                                <small className=\"like-title\"> Be the first to <b>like this</b></small>\n                                :\n                                <small>{userpost.likes.length} Likes</small>\n                            }\n\n\n                            <small className=\"post-date\">\n                                {\n                                    moment(userpost.date).format('MMM D')\n                                }\n                            </small>\n                        </div>\n\n                        {/*  add a comment form */}\n                        <form className=\"addComment\" onSubmit={handleCommentPost}>\n                            <input\n                                ref={inputRef}\n                                value={commentText}\n                                onChange={handleCommentTextChange}\n                                type=\"text\"\n                                placeholder=\"Add a comment...\"\n                                className=\"commentText\"\n                                name=\"commentText\"\n                            />\n                            <button\n\n                                disabled={commentText ? false : true}\n                                type=\"submit\"\n                                className=\"postText-btn\">Post</button>\n                        </form>\n\n                    </div>\n\n                </div>\n\n\n            </main>\n\n\n\n\n\n        </div>\n    )\n}\nconst mapStateToProps = ({ socket, post, user }) => {\n    return {\n        socket: socket.socket,\n        userpost: post.post,\n        user: user.currentUser\n    }\n}\nexport default connect(mapStateToProps,\n    { commentPost, getPosts, getSinglePost, likePost, unLikePost }\n)(withRouter(PostPage))\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}