{"ast":null,"code":"import * as postActionTypes from '../Constants/postConstants';\nimport { setToken } from '../../utils';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\nconst token = localStorage.getItem('authToken'); // const baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\"\n//  load explore posts \n\nexport const getPosts = history => {\n  return async dispatch => {\n    try {\n      if (token) {\n        await setToken(token);\n      }\n\n      ;\n      const response = await axios.get(`/api/route/post/allPosts`);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.GET_POSTS_SUCCESS,\n          payload: response.data.posts\n        });\n        console.log(response.data);\n      }\n\n      ;\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response.data);\n        await dispatch({\n          type: postActionTypes.GET_POSTS_FAIL,\n          payload: error.response.data\n        });\n\n        if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n          localStorage.removeItem('authToken');\n          history.push('/');\n        } // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n\n      }\n    }\n  };\n}; //  @comment on a post with a given post id passed as a param to the url\n\nexport const commentPost = (postId, commentText) => {\n  return async dispatch => {\n    if (token) {\n      await setToken(token);\n    }\n\n    ;\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const response = await axios.post(`/api/route/post/comment/${postId}`, config, data);\n\n      if (response) {\n        dispatch({\n          type: postActionTypes.GET_POSTS_SUCCESS,\n          payload: response.data.msg\n        });\n        console.log(response.data);\n      }\n\n      ;\n    } catch (error) {\n      console.log(error.response.data);\n      await dispatch({\n        type: postActionTypes.COMMENT_POST_FAIL,\n        payload: error.response.data\n      });\n\n      if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n        localStorage.removeItem('authToken');\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/Actions/postActions.js"],"names":["postActionTypes","setToken","axios","cogoToast","Routes","token","localStorage","getItem","getPosts","history","dispatch","response","get","type","GET_POSTS_SUCCESS","payload","data","posts","console","log","error","GET_POSTS_FAIL","msg","removeItem","push","commentPost","postId","commentText","config","headers","post","COMMENT_POST_FAIL"],"mappings":"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","sourcesContent":["import * as postActionTypes from '../Constants/postConstants';\nimport { setToken } from '../../utils'\n\n\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport * as Routes from '../../component/routes';\n\nconst token = localStorage.getItem('authToken');\n\n// const baseUrl = process.env.REACT_APP_BASE_URL || \"http://localhost:9000\"\n//  load explore posts \nexport const getPosts = (history) => {\n    return async (dispatch) => {\n\n        try {\n            if (token) {\n                await setToken(token)\n            };\n            const response = await axios.get(`/api/route/post/allPosts`);\n            if (response) {\n                dispatch({ type: postActionTypes.GET_POSTS_SUCCESS, payload: response.data.posts })\n                console.log(response.data);\n            };\n\n        } catch (error) {\n            if (error.response) {\n                console.log(error.response.data)\n                await dispatch({ type: postActionTypes.GET_POSTS_FAIL, payload: error.response.data })\n                if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                    localStorage.removeItem('authToken');\n                    history.push('/')\n                }\n                // cogoToast.error(`${error.response.data.msg}`, { position: \"top-right\" })\n            }\n        }\n\n    }\n}\n\n//  @comment on a post with a given post id passed as a param to the url\nexport const commentPost = (postId, commentText) => {\n    return async (dispatch) => {\n        if (token) {\n            await setToken(token)\n        };\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }\n        try {\n            const response = await axios.post(`/api/route/post/comment/${postId}`, config, data);\n            if (response) {\n                dispatch({ type: postActionTypes.GET_POSTS_SUCCESS, payload: response.data.msg })\n                console.log(response.data);\n            };\n\n        } catch (error) {\n            console.log(error.response.data)\n            await dispatch({ type: postActionTypes.COMMENT_POST_FAIL, payload: error.response.data })\n            if (error.response.data.msg === \"jwt expired\" || error.response.data.msg === `you're not authorised`) {\n                localStorage.removeItem('authToken');\n\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}