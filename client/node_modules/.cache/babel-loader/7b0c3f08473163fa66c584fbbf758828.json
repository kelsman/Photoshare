{"ast":null,"code":"import { userActionTypes } from '../Constants/userConstants';\nimport { setToken } from '../../utils';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nconst baseUrl = \"http://localhost:9000\";\nexport const signup = (data, history) => {\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      cogoToast.loading('Registering....');\n      const response = await axios.post(`${baseUrl}/api/route/user/register`, config, data);\n\n      if (response) {\n        await dispatch({\n          type: userActionTypes.SIGN_UP_SUCESS,\n          payload: response.data\n        });\n        cogoToast.success('Register successfully');\n        history.push('/');\n      }\n    } catch (error) {\n      console.log(error.message);\n\n      if (error.response) {\n        await dispatch({\n          type: userActionTypes.SIGN_UP_FAIL,\n          payload: error.response.data\n        });\n        cogoToast.error(`${error.response.data.msg}`);\n      }\n    }\n  };\n};\nexport const signin = data => {\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const response = await axios.post(`${baseUrl}/api/route/user/login`, data, config);\n\n      if (response) {\n        await dispatch({\n          type: userActionTypes.LOG_IN_SUCCESS,\n          payload: response.data\n        });\n        await localStorage.setItem('authToken', response.data.jwtToken);\n\n        try {\n          await setToken(JSON.stringify(localStorage.getItem('authToken')));\n          const res = await axios.get(`${baseUrl}/api/route/user/getUser`, {\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n\n          if (res) {\n            await dispatch({\n              type: userActionTypes.LOAD_USER_SUCESS,\n              payload: res.data.user\n            });\n            cogoToast.success('sign in sucess', {\n              position: \"bottom-right\"\n            });\n          }\n        } catch (error) {\n          if (error.response) {\n            await dispatch({\n              type: userActionTypes.LOAD_USER_FAIL,\n              payload: error.response.data\n            });\n          }\n        }\n      }\n    } catch (error) {\n      if (error.response) {\n        await dispatch({\n          type: userActionTypes.LOG_IN_FAIL,\n          payload: error.response.data\n        });\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/mac/Documents/mern stack/photoShare/client/src/redux/Actions/userActions.js"],"names":["userActionTypes","setToken","axios","cogoToast","baseUrl","signup","data","history","dispatch","config","headers","loading","response","post","type","SIGN_UP_SUCESS","payload","success","push","error","console","log","message","SIGN_UP_FAIL","msg","signin","LOG_IN_SUCCESS","localStorage","setItem","jwtToken","JSON","stringify","getItem","res","get","LOAD_USER_SUCESS","user","position","LOAD_USER_FAIL","LOG_IN_FAIL"],"mappings":"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","sourcesContent":["import { userActionTypes } from '../Constants/userConstants';\nimport { setToken } from '../../utils'\n\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\n\nconst baseUrl = \"http://localhost:9000\"\n\nexport const signup = (data, history) => {\n    return async (dispatch) => {\n        try {\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n            cogoToast.loading('Registering....')\n            const response = await axios.post(`${baseUrl}/api/route/user/register`, config, data);\n            if (response) {\n                await dispatch({ type: userActionTypes.SIGN_UP_SUCESS, payload: response.data });\n                cogoToast.success('Register successfully');\n                history.push('/')\n            }\n        } catch (error) {\n            console.log(error.message)\n            if (error.response) {\n                await dispatch({ type: userActionTypes.SIGN_UP_FAIL, payload: error.response.data })\n                cogoToast.error(`${error.response.data.msg}`)\n            }\n        }\n    }\n};\n\nexport const signin = (data) => {\n    return async (dispatch) => {\n        try {\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            };\n            const response = await axios.post(`${baseUrl}/api/route/user/login`, data, config);\n            if (response) {\n                await dispatch({ type: userActionTypes.LOG_IN_SUCCESS, payload: response.data });\n                await localStorage.setItem('authToken', response.data.jwtToken);\n\n                try {\n                    await setToken(JSON.stringify(localStorage.getItem('authToken')))\n                    const res = await axios.get(`${baseUrl}/api/route/user/getUser`, {\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        }\n                    });\n                    if (res) {\n                        await dispatch({ type: userActionTypes.LOAD_USER_SUCESS, payload: res.data.user })\n                        cogoToast.success('sign in sucess', { position: \"bottom-right\" })\n                    }\n                } catch (error) {\n                    if (error.response) {\n                        await dispatch({ type: userActionTypes.LOAD_USER_FAIL, payload: error.response.data })\n                    }\n                }\n            }\n        } catch (error) {\n            if (error.response) {\n                await dispatch({ type: userActionTypes.LOG_IN_FAIL, payload: error.response.data });\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}